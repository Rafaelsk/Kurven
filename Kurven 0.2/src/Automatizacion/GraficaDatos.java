/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Automatizacion;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;

/**
 *
 * @author rafael
 */
public class GraficaDatos extends javax.swing.JPanel {

    /**
     * Creates new form GraficaDatos
     */
    public GraficaDatos() {
        initComponents();
        //this.vp=vp;
    }
    @Override
    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        
        int xOffSet = 50;
        int yOffSet = 20;
        
        g.setColor(Color.white);
        g.drawLine(xOffSet, yOffSet,xOffSet,this.getHeight()-yOffSet);
        g.drawString("Salida", xOffSet-g.getFontMetrics().stringWidth("Salida")/2, yOffSet-5);
        g.drawLine(xOffSet,this.getHeight()-yOffSet,this.getWidth()-xOffSet,this.getHeight()-yOffSet);
        g.drawString("Tiempo", this.getWidth()-xOffSet+3, this.getHeight()-yOffSet+2);
        
        int pointSize = 4;
        ancho = this.getWidth()-2*xOffSet;
        alto = this.getHeight()-2*yOffSet;
        
        if(graficar)
        {
            escalaTiempo = (int) (ancho/this.puntos[this.puntos.length-1].getX());
            escalaSalida = (int) (alto/this.puntos[this.puntos.length-1].getY());
            for(int i=0; i<puntos.length; i++)
            {
                int x = (int) (puntos[i].getX()*escalaTiempo);
                int y = (int) (puntos[i].getY()*escalaSalida);
                
                g.fillOval(x+xOffSet-pointSize/2, this.getHeight()-yOffSet-y-pointSize/2, pointSize, pointSize);
                g.drawLine(x+xOffSet, this.getHeight()-yOffSet+2, x+xOffSet, this.getHeight()-yOffSet-2);
                String num = Integer.toString((int)puntos[i].getX());
                g.drawString(num,x+xOffSet-g.getFontMetrics().stringWidth(num)/2, this.getHeight()-yOffSet+15);
                
            }
            for(int i=0; i<((int)puntos[puntos.length-1].getY())+1; i++)
            {
                g.drawString(Integer.toString(i),xOffSet-20 , this.getHeight()-yOffSet-i*escalaSalida+5);
                g.drawLine(xOffSet-2, this.getHeight()-yOffSet-i*escalaSalida, xOffSet+2, this.getHeight()-yOffSet-i*escalaSalida);
            }
        }
        
    }
    
    public void setPuntos(ArrayList<Punto> puntos)
    {
        this.puntos = new Punto[puntos.size()];
        puntos.toArray(this.puntos);
        
    }
    
    public void graficar()
    {
        graficar = true;
        repaint();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private boolean graficar = false;
    Punto[] puntos;
    VentanaPrincipal vp;
    int escalaTiempo;
    int escalaSalida;
    int ancho;
    int alto;
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));
        setAutoscrolls(true);
        setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 744, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 442, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
